apply plugin: 'base'
apply plugin: 'sonar-runner'

ext {
    springVersion = '4.0.0.BUILD-SNAPSHOT'
    rawAddressDataFolder = '/'
//    springVersion = '3.2.5.RELEASE'
    springDataVersion = '1.4.2.RELEASE'
    javaVersion = 1.7
    slf4jVersion = '1.7.2'
    querydslVersion = '3.2.4'
    hibernateVersion = "4.2.7.Final"
}

if(!project.hasProperty('dir')) {
    rawAddressDataFolder = '/'
} else {
    rawAddressDataFolder = dir;
}

buildscript {
    repositories {
        mavenLocal()
        maven { url 'http://repo.springsource.org/plugins-release' }
        jcenter()
    }
    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.0'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.1'
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "http://192.168.13.209:9000"
        property "sonar.jdbc.url", "jdbc:mysql://192.168.13.209:3306/sonar"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "root"
        property "sonar.jdbc.password", 'qwer12#$'
    }
}

configurations {
    all {
        exclude module: 'commons-logging'
        exclude module: 'log4j'
    }
}

allprojects {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse-wtp'
    apply plugin: 'idea'
    apply plugin: 'groovy'
    
    if(project.hasProperty('target')) {
        sourceSets {
            main.resources.srcDirs = ['src/main/resources', "src/main/resources-${project.target}"]
        }
    } else {
        String hostname = InetAddress.getLocalHost().getHostName();
        if(hostname.endsWith('.local')) {   //맥의 경우, .local 이 모든 hostname에 추가됩니다.
            hostname.replace(".local", '')
        }
        sourceSets {
            main.resources.srcDirs = ['src/main/resources', "src/main/resources-" + hostname]
        }
    }
    
    sourceCompatibility = rootProject.ext.javaVersion
    targetCompatibility = rootProject.ext.javaVersion

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
        maven { url 'http://repo.spring.io/snapshot' }
        maven {url = "http://192.168.13.209:8080/nexus/content/repositories/releases/"}
        maven {url = "http://192.168.13.209:8080/nexus/content/repositories/thirdparty/"}
    }
    
    dependencies {
        compile "org.slf4j:jcl-over-slf4j:${rootProject.ext.slf4jVersion}"
        compile "org.slf4j:jul-to-slf4j:${rootProject.ext.slf4jVersion}"
        compile "org.slf4j:slf4j-api:${rootProject.ext.slf4jVersion}"
        compile 'com.fasterxml.jackson.core:jackson-databind:2.2.3'
        testCompile "junit:junit:4.11"
        testCompile "org.springframework:spring-test:${rootProject.ext.springVersion}"
        testCompile 'org.mockito:mockito-all:1.9.5'
        provided 'org.projectlombok:lombok:0.12.0'

        groovy "org.codehaus.groovy:groovy-all:2.1.5"
        testCompile "org.spockframework:spock-core:1.0-groovy-2.0-SNAPSHOT"
    }
    
    test {
        jacoco {
            destinationFile = file("target/jacoco.exec")
            classDumpFile = file("target/classpathdumps")
            excludes = [ '**.entities.**' ]
            append = false
        }
    }

    sonarRunner {
        sonarProperties {
            property "sonar.sourceEncoding", "UTF-8"
        }
    }

    task initSrc << {
        project.sourceSets*.allSource.srcDirTrees.flatten().dir.each { dir ->
            dir.mkdirs()
        }
    }

    tasks.withType(Compile) {
        options.encoding = 'UTF-8'
    }
}

configure(subprojects.findAll { it.name.endsWith('domain') }) {
    apply plugin: 'application'
    mainClassName = "co.kr.daesung.app.center.domain.utils.AddressPutterMain"

    run {
        args "${rootProject.ext.rawAddressDataFolder}"
    }

    sourceSets {
        generated {
            java {
                srcDirs = ['src/main/generated']
            }
        }
    }

    dependencies {
        compile 'me.xyzlast:common-dao-spring-config:0.9.1'
        compile 'ch.qos.logback:logback-classic:1.0.13'
        compile 'mysql:mysql-connector-java:5.1.22'
        compile 'com.jolbox:bonecp:0.7.1.RELEASE'
        compile 'com.google.guava:guava:14.0'
        // compile "com.microsoft.sqlserver.jdbc:sqljdbc:3.0"
        compile("org.springframework:spring-core:${rootProject.ext.springVersion}") {
            exclude(group: 'commons-logging', module: 'commons-logging')
        }
        compile "org.springframework:spring-beans:${rootProject.ext.springVersion}"
        compile "org.springframework:spring-aop:${rootProject.ext.springVersion}"
        compile "org.springframework:spring-orm:${rootProject.ext.springVersion}"
        compile "org.springframework:spring-tx:${rootProject.ext.springVersion}"
        compile "org.springframework:spring-context:${rootProject.ext.springVersion}"
        compile "org.springframework:spring-context-support:${rootProject.ext.springVersion}"

        compile "org.hibernate:hibernate-core:${rootProject.ext.hibernateVersion}"
        compile "org.hibernate:hibernate-entitymanager:${rootProject.ext.hibernateVersion}"
        compile "org.hibernate:hibernate-validator:5.0.1.Final"
        compile "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1. Final"

        compile 'org.hibernate:hibernate-ehcache:4.2.7.Final'
        compile 'net.sf.ehcache:ehcache:2.7.4'

        compile("org.springframework.data:spring-data-jpa:${rootProject.ext.springDataVersion}") {
            exclude(group: 'org.springframework', module: 'spring-core')
            exclude(group: 'org.springframework', module: 'spring-beans')
            exclude(group: 'org.springframework', module: 'spring-orm')
            exclude(group: 'org.springframework', module: 'spring-context')
            exclude(group: 'org.springframework', module: 'spring-aop')
            exclude(group: 'org.springframework', module: 'spring-tx')
        }
        compile "com.mysema.querydsl:querydsl-core:${rootProject.ext.querydslVersion}"
        compile "com.mysema.querydsl:querydsl-jpa:${rootProject.ext.querydslVersion}"
        compile "com.mysema.querydsl:querydsl-sql:${rootProject.ext.querydslVersion}"
        compile "com.mysema.querydsl:querydsl-apt:${rootProject.ext.querydslVersion}"

        provided "com.mysema.querydsl:querydsl-apt:${rootProject.ext.querydslVersion}"
    }

    task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
        source = sourceSets.main.java
        classpath = configurations.compile + configurations.provided
        options.compilerArgs = [
                "-proc:only",
                "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
        ]
        destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
    }

    compileJava {
        dependsOn generateQueryDSL
        source generateQueryDSL.destinationDir
    }

    compileGeneratedJava {
        dependsOn generateQueryDSL
        options.warnings = false
        classpath += sourceSets.main.runtimeClasspath
    }

    clean {
        delete sourceSets.generated.java.srcDirs
    }

    idea {
        module {
            sourceDirs += file('src/main/java/generated')
        }
    }
}

configure(subprojects.findAll { it.name.endsWith('Web') }) {
    apply plugin: 'war'
    apply plugin: 'tomcat'

    dependencies {
        String tomcatVersion = '7.0.47'
        tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
        tomcat "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
        tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
            exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
        }
        compile("org.springframework:spring-webmvc:${rootProject.ext.springVersion}") {
            exclude(group: 'commons-logging', module: 'commons-logging')
        }
        provided 'org.apache.tomcat:tomcat-servlet-api:7.0.47'

    }
}
